#!/usr/bin/env bash

## Initialize Project Menu
##
## Usage: fin init

# Abort if anything fails
set -e

#-------------------------- Settings --------------------------------
#-------------------------- END: Settings --------------------------------

#-------------------------- Helper functions --------------------------------
  source ${PROJECT_ROOT}/.composer/bin/helpers
#-------------------------- END: Helper functions --------------------

#-------------------------- Functions --------------------------------
  start(){
    # STEP 1: Docker LEMP Stack initialization
    echo-green "
  ╦┌┐┌┬┌┬┐┬┌─┐┬  ┬┌─┐┌─┐  ╦  ╔═╗╔╦╗╔═╗  ╔═╗┌┬┐┌─┐┌─┐┬┌─
  ║││││ │ │├─┤│  │┌─┘├┤   ║  ║╣ ║║║╠═╝  ╚═╗ │ ├─┤│  ├┴┐
  ╩┘└┘┴ ┴ ┴┴ ┴┴─┘┴└─┘└─┘  ╩═╝╚═╝╩ ╩╩    ╚═╝ ┴ ┴ ┴└─┘┴ ┴ooo"
    echo-green-bg " Step 1 of 3 "
    echo-yellow "Initialize LEMP stack"
    # reset project
    fin project reset -f
    echo-yellow "Project stack ready"
    echo-green "  [✓] $NC${NGINX}" 
    echo-green "  [✓] $NC${MYSQL}" 
    echo-green "  [✓] $NC${PHP}" 
    echo-green "  [✓] & ${NC}PHPMyAdmin" 

    # also help reset endpoints between linux/windows
    if [ "${1}" = true ]
    then
      fin cleanup;
      fin system reset;
    else
      Q="${white}Do you want to reset Docker also ${blue}(y/n)${green}?"
      Q=$(echo-green "? ${Q} ")
      while true; do
        read -n 1 -p "${Q}" answer
        echo ""
        case ${answer:0:1} in
            [Yy]*)
              fin system reset
              break;;
            [Nn]*) echo "No."; break;;
            *) echo "Sorry, what?" >&2
        esac
      done
    fi
    ######################################################################
  }

  latest(){
    # STEP 2:  Database migration
    echo-green "
  ╔═╗┬  ┌─┐┌┬┐┌─┐┌─┐┬─┐┌┬┐ ╔═╗╦ ╦       ╔═╗┬ ┬┬  ┬    ╦  ┌─┐┌┬┐┌─┐┌─┐┌┬┐
  ╠═╝│  ├─┤ │ ├┤ │ │├┬┘│││ ╚═╗╠═╣  ───  ╠═╝│ ││  │    ║  ├─┤ │ ├┤ └─┐ │
  ╩  ┴─┘┴ ┴ ┴ └  └─┘┴└─┴ ┴o╚═╝╩ ╩       ╩  └─┘┴─┘┴─┘  ╩═╝┴ ┴ ┴ └─┘└─┘ ┴ooo"
    echo-green-bg " Step 2 of 3 "
    echo-yellow "Pull latest code & database"
    fin latest ${1}
  }

  install(){
    # STEP 3: Site initialization
    echo-green "
  ╦┌┐┌┬┌┬┐┬┌─┐┬  ┬┌─┐┌─┐  ╦ ╦┌─┐┌┐ ╔═╗┬┌┬┐┌─┐
  ║││││ │ │├─┤│  │┌─┘├┤   ║║║├┤ ├┴┐╚═╗│ │ ├┤
  ╩┘└┘┴ ┴ ┴┴ ┴┴─┘┴└─┘└─┘  ╚╩╝└─┘└─┘╚═╝┴ ┴ └─┘ooo"
    echo-green-bg " Step 3 of 3 "
    echo-yellow "Initialize site dependencies"
    fin install
    echo -e "${green_bg}${NC}${green} Completed all initialization steps.${NC}"
    echo-green-bg " COMPLETE "
    echo-yellow "Initialized"
    echo-green "  [✓] Initialize LEMP stack"
    echo-green "  [✓] Pull latest code & database"
    echo-green "  [✓] Initialize site dependencies"
    ######################################################################
  }

  ######################################################################
  launch_site(){
    cmd.exe /C start "http://${VIRTUAL_HOST}:${1}";
  }

  # ALL
  # 1. Initialize Docker Environment
  # 2. Initialize Site Environment
  # 3. Pull latest code & DB changes
  # 4. Build & Watch Development Files
  ######################################################################
  all(){
    cd ${PROJECT_ROOT}
    echo -e "${purple}$(cat .composer/bin/ascii/logo)"
    WIPE=${1}
    # INITIALIZE DOCKER
    start ${WIPE};

    #? if wipe then set to pull new data?
    PULL=${WIPE}
    if [ "${PULL}" = true ]; then
      PULL=pull
    fi

    # PULL LATEST CODE & DB
    latest ${PULL};

    # RUN INSTALLATIONS
    install ${WIPE};

    # BUILD FOR PRODUCTION
    fin prod;

    # TEST ACCESSIBILITY 
    fin test;

    # SYNC MEDIA LIBRARY
    fin sync download 

    # LAUNCH SITE
    launch_site;
  }

  init(){
    echo-green "
╦┌┐┌┬┌┬┐┬┌─┐┬  ┬┌─┐┌─┐  ╔═╗┬─┐┌─┐ ┬┌─┐┌─┐┌┬┐
║││││ │ │├─┤│  │┌─┘├┤   ╠═╝├┬┘│ │ │├┤ │   │
╩┘└┘┴ ┴ ┴┴ ┴┴─┘┴└─┘└─┘  ╩  ┴└─└─┘└┘└─┘└─┘ ┴ "
    echo-yellow "Init Menu"
    echo-green "  ${blue}Enter ${light_green}1 ${blue}to init everything, or enter a specific step to run.
    ${green}1) ${light_green}All ${white}of the Below
    ${green}2) ${white}Start/Reset Docksal & Docker LEMP stack
    ${green}3) ${white}Pull latest code & database from Platform.sh
    ${green}4) ${white}Run Composer/NodeJS/WordPress installers, setup plugins and dependencies
    ${green}5) ${white}Compile Build for Production
    ${green}6) ${white}Synchronize Media Uploads 
    ${green}7) ${green}fin help ${blue}see all commands available 
    "
    select menu in "init all" "(re)start" "latest" "install" "build" "sync" "help"; do
      case $menu in
        "init all" ) all; break;;
        "(re)start" ) start; fin init; break;;
        latest ) latest; fin init; break;;
        install ) install; fin init; break;;
        help ) fin help; break;;
        build ) fin prod; fin init; break;;
        sync ) fin sync; fin init; break;;
      esac
    done
  }

  powerOffLando(){
    if [ -x "$(command -v lando)" ]; then
      LIST=$(lando list)
      if [ "${LIST}" != "[]" ]; then
        echo-red "Power Off Lando"
        lando poweroff
      fi
    fi;
  }

#-------------------------- END: Functions --------------------------------

#-------------------------- Execution --------------------------------
  cd ${PROJECT_ROOT}
  chmod +x .docksal/commands/*
  powerOffLando

  # accept param for fin init to kickstart step
  case ${1} in
    # INITIATE THE WHOLE STACK - W/ CLEAN REFRESH 
    all | a | hardware | hard )
      echo-yellow "RELEASE THE INIT-ALLS!!!"
      time all true
      ;; 

    # INSTALL SOFTWARE
    install | wordpress | software | soft | site )
      echo-yellow "Installing site, plugins, and node modules..."
      time install  
      ;;

    # SHORTCUT FOR COMPOSER 
    composer )
      echo-yellow "Reinstalling Composer..."
      time fin composer run reinstall
      ;;

    # SHORTCUT FOR YARN
    yarn | node )
      echo-yellow "Reinstalling Yarn..."
      time fin composer run reinstall-yarn
      ;;

    # GIT UPDATES
    git | submodules)
      echo-yellow "Updating Git & Submodules..."
      fin composer run submodules 
      fin pull code
      ;;

    # LATEST DATA
    latest | pull | platform )
      echo-yellow "Pulling latest code and data..."
      time latest pull 
      ;;

    # DEV ENV 
    dev | develop | development | staging | stage )
      echo-yellow "Initiating development environment..."
      fin dev & sleep 15; launch_site 3000;
      ;;

    # PRODUCTION BUILD
    prod | production | build | compose )
      echo-yellow "Building for Production build..."
      time fin prod
      fin test
      launch_site
      ;;

    # SYNC UPLOADS DIRECTORIES
    sync | mount | upload | download )
      echo-yellow "Sync Uploads"
      if [ "${1}" = "upload" ]; then
        time fin sync upload 
      elif [ "${1}" = "download" ]; then
        time fin sync download
      else
        time fin sync download
        time fin sync upload 
      fi
      ;;

    # TEST WEBSITE 
    test )
      echo-yellow "Checking if website is accessible... "
      fin test  
      ;;

    # VUE UI PANEL
    vue )
      echo-yellow "Initiating VUE UI"
      fin vue
      ;;

    # FOR EVERYTHING ELSE - THERE'S ASTERISK
    *)
      #? 1ST TIME USERS?
      if [ ! -d "${PROJECT_ROOT}/vendor" ]
      then
        #* RELEASE THE INIT ALL!
        time all true
      else
        # GIVE 'EM CHOICES
        init
      fi
      ;;
  esac
#-------------------------- END: Execution --------------------------------
